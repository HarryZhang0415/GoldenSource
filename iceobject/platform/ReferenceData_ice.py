# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `ReferenceData.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import SingleGen_ice
import Exchanges_ice
import DataObject_ice
import ReferenceEnums_ice

# Included module GS
_M_GS = Ice.openModule('GS')

# Included module GS.dataobjects
_M_GS.dataobjects = Ice.openModule('GS.dataobjects')

# Included module GS.exceptions
_M_GS.exceptions = Ice.openModule('GS.exceptions')

# Included module GS.enums
_M_GS.enums = Ice.openModule('GS.enums')

# Included module GS.enums.mktdata
_M_GS.enums.mktdata = Ice.openModule('GS.enums.mktdata')

# Included module GS.fixings
_M_GS.fixings = Ice.openModule('GS.fixings')

# Included module GS.enums.instr
_M_GS.enums.instr = Ice.openModule('GS.enums.instr')

# Included module GS.instrument
_M_GS.instrument = Ice.openModule('GS.instrument')

# Included module GS.enums.reference
_M_GS.enums.reference = Ice.openModule('GS.enums.reference')

# Start of module GS
__name__ = 'GS'

# Start of module GS.dataobjects
__name__ = 'GS.dataobjects'

# Start of module GS.dataobjects.reference
_M_GS.dataobjects.reference = Ice.openModule('GS.dataobjects.reference')
__name__ = 'GS.dataobjects.reference'

if 'CalendarId' not in _M_GS.dataobjects.reference.__dict__:
    _M_GS.dataobjects.reference.CalendarId = Ice.createTempClass()
    class CalendarId(object):
        def __init__(self, exchange_id=_M_GS.enums.ExecExchId.eeNone, calendar_type=_M_GS.enums.reference.CalendarType.ctNone, country=""):
            self.exchange_id = exchange_id
            self.calendar_type = calendar_type
            self.country = country

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.exchange_id)
            _h = 5 * _h + Ice.getHash(self.calendar_type)
            _h = 5 * _h + Ice.getHash(self.country)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_GS.dataobjects.reference.CalendarId):
                return NotImplemented
            else:
                if self.exchange_id is None or other.exchange_id is None:
                    if self.exchange_id != other.exchange_id:
                        return (-1 if self.exchange_id is None else 1)
                else:
                    if self.exchange_id < other.exchange_id:
                        return -1
                    elif self.exchange_id > other.exchange_id:
                        return 1
                if self.calendar_type is None or other.calendar_type is None:
                    if self.calendar_type != other.calendar_type:
                        return (-1 if self.calendar_type is None else 1)
                else:
                    if self.calendar_type < other.calendar_type:
                        return -1
                    elif self.calendar_type > other.calendar_type:
                        return 1
                if self.country is None or other.country is None:
                    if self.country != other.country:
                        return (-1 if self.country is None else 1)
                else:
                    if self.country < other.country:
                        return -1
                    elif self.country > other.country:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_GS.dataobjects.reference._t_CalendarId)

        __repr__ = __str__

    _M_GS.dataobjects.reference._t_CalendarId = IcePy.defineStruct('::GS::dataobjects::reference::CalendarId', CalendarId, (), (
        ('exchange_id', (), _M_GS.enums._t_ExecExchId),
        ('calendar_type', (), _M_GS.enums.reference._t_CalendarType),
        ('country', (), IcePy._t_string)
    ))

    _M_GS.dataobjects.reference.CalendarId = CalendarId
    del CalendarId

if 'Holiday' not in _M_GS.dataobjects.reference.__dict__:
    _M_GS.dataobjects.reference.Holiday = Ice.createTempClass()
    class Holiday(object):
        def __init__(self, date=Ice._struct_marker, day_week=0, descr="", open_weight=Ice._struct_marker):
            if date is Ice._struct_marker:
                self.date = _M_GS.dataobjects.IDate()
            else:
                self.date = date
            self.day_week = day_week
            self.descr = descr
            if open_weight is Ice._struct_marker:
                self.open_weight = _M_GS.dataobjects.IFixed()
            else:
                self.open_weight = open_weight

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.date)
            _h = 5 * _h + Ice.getHash(self.day_week)
            _h = 5 * _h + Ice.getHash(self.descr)
            _h = 5 * _h + Ice.getHash(self.open_weight)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_GS.dataobjects.reference.Holiday):
                return NotImplemented
            else:
                if self.date is None or other.date is None:
                    if self.date != other.date:
                        return (-1 if self.date is None else 1)
                else:
                    if self.date < other.date:
                        return -1
                    elif self.date > other.date:
                        return 1
                if self.day_week is None or other.day_week is None:
                    if self.day_week != other.day_week:
                        return (-1 if self.day_week is None else 1)
                else:
                    if self.day_week < other.day_week:
                        return -1
                    elif self.day_week > other.day_week:
                        return 1
                if self.descr is None or other.descr is None:
                    if self.descr != other.descr:
                        return (-1 if self.descr is None else 1)
                else:
                    if self.descr < other.descr:
                        return -1
                    elif self.descr > other.descr:
                        return 1
                if self.open_weight is None or other.open_weight is None:
                    if self.open_weight != other.open_weight:
                        return (-1 if self.open_weight is None else 1)
                else:
                    if self.open_weight < other.open_weight:
                        return -1
                    elif self.open_weight > other.open_weight:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_GS.dataobjects.reference._t_Holiday)

        __repr__ = __str__

    _M_GS.dataobjects.reference._t_Holiday = IcePy.defineStruct('::GS::dataobjects::reference::Holiday', Holiday, (), (
        ('date', (), _M_GS.dataobjects._t_IDate),
        ('day_week', (), IcePy._t_int),
        ('descr', (), IcePy._t_string),
        ('open_weight', (), _M_GS.dataobjects._t_IFixed)
    ))

    _M_GS.dataobjects.reference.Holiday = Holiday
    del Holiday

if '_t_HolidayDict' not in _M_GS.dataobjects.reference.__dict__:
    _M_GS.dataobjects.reference._t_HolidayDict = IcePy.defineDictionary('::GS::dataobjects::reference::HolidayDict', (), _M_GS.dataobjects._t_IDate, _M_GS.dataobjects.reference._t_Holiday)

if 'Calendar' not in _M_GS.dataobjects.reference.__dict__:
    _M_GS.dataobjects.reference.Calendar = Ice.createTempClass()
    class Calendar(object):
        def __init__(self, calendar_id=Ice._struct_marker, holidays=None):
            if calendar_id is Ice._struct_marker:
                self.calendar_id = _M_GS.dataobjects.reference.CalendarId()
            else:
                self.calendar_id = calendar_id
            self.holidays = holidays

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_GS.dataobjects.reference.Calendar):
                return NotImplemented
            else:
                if self.calendar_id != other.calendar_id:
                    return False
                if self.holidays != other.holidays:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_GS.dataobjects.reference._t_Calendar)

        __repr__ = __str__

    _M_GS.dataobjects.reference._t_Calendar = IcePy.defineStruct('::GS::dataobjects::reference::Calendar', Calendar, (), (
        ('calendar_id', (), _M_GS.dataobjects.reference._t_CalendarId),
        ('holidays', (), _M_GS.dataobjects.reference._t_HolidayDict)
    ))

    _M_GS.dataobjects.reference.Calendar = Calendar
    del Calendar

# End of module GS.dataobjects.reference

__name__ = 'GS.dataobjects'

# End of module GS.dataobjects

__name__ = 'GS'

# End of module GS
